# ===============================
# = DATA SOURCE
# ===============================
# Set here configurations for the database connection
# lancer un conteneur mysql docker run --name mysql -e MYSQL_DATABASE=rabbitDB -e MYSQL_ALLOW_EMPTY_PASSWORD=yes -p 3306:3306 -d mysql
# lancer docker exec -it mysql mysql --password  (pour voir le contenu)
spring.datasource.url=jdbc:mysql://localhost:3306/rabbitDB?useSSL=false
spring.datasource.username=root
spring.datasource.password=
spring.datasource.driver-class-name=com.mysql.jdbc.Driver

server.port=8081
spring.profiles.active[0]=mysql

# ===============================
# = DATA SOURCE H2
# ===============================
#spring.jpa.show-sql=true
#spring.h2.console.enabled=true
#spring.h2.console.path=/h2-console

=============================================================================
# = Keep the connection alive if idle for a long time (needed in production)
=============================================================================
spring.datasource.testWhileIdle=true
spring.datasource.validationQuery=SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================
# Show or not log for each sql query
spring.jpa.show-sql=true

# Hibernate ddl auto (create, create-drop, update): with "create-drop" the database
# schema will be automatically created afresh for every start of application
spring.jpa.hibernate.ddl-auto=update

# Naming strategy
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyHbmImpl
spring.jpa.hibernate.naming.physical-strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect